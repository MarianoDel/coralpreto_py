* ROADMAP Coralpetro

** Instalar PyAudio
   - para poder manejar archivos y buffers de audio

   - con pip3 install pyaudio me dice que le falta una lib portaudio.h

   - lo instalo directo de la pagina de portaudio, uso el paquete ponce para x86

** Instalar PyAudio en Raspbian
   You can compile PortAudio directly on the Raspberry Pi.
   PortAudio uses ALSA. So you will need to install the ALSA developer library
   $ sudo apt-get install libasound-dev

   I recommend using the nightly snapshot of PortAudio V19 from http://www.portaudio.com/download.html

   Then compile PortAudio and the examples.
   $ cd portaudio
   $ ./configure
   $ make
   $ sudo make install

*** Script Test
    - hago un test de dispositivos 

*** Scripts de prueba con wav
    https://riptutorial.com/python/topic/10627/pyaudio

*** Wave Tutorial
    https://nbviewer.jupyter.org/github/mgeier/python-audio/blob/master/audio-files/audio-files-with-wave.ipynb

*** Para grabar audio con el mic
    https://realpython.com/playing-and-recording-sound-python/

*** Intro PyAudio
    https://slides.com/jeancruypenynck/introduction-to-pyaudio/embed#/

** Download audio or video from Youtube
*** Como lo uso, si quiero solo el audio
    youtube-dl --extract-audio --audio-format wav https://www.youtube.com/watch?v=kiMqDjazJwk

*** youtube-dl
    - Lo baje desde slackbuilds.org

*** Necesito ffmpeg para convertir formatos de audio
    - si quiero bajar y convertir con youtube-dl usa ffmpeg
    - Lo bajo con slpkg, tarda bastante porque lo compila como lib

*** Para escuchar o info del wav con SOX
    - sox si esta instalado lo puedo llamar directamente con play
      que es un wrapper
    $ play 2minutos.wav

    - info del header del archivo la puedo conseguir con soxi
    $ soxi output.wav

*** Para escuchar el wav con ffmpeg
    - con ffmpeg instalado tengo el wrapper ffmplay
    $ ffplay 2minutos.wav

** Uso de wave lib-std de python
   - docu original
     https://docs.python.org/3/library/wave.html
     
   - buenos ejemplos de uso
     http://blog.acipo.com/wave-generation-in-python/

   - RIFF & WAV headers
     http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html

** Tomar audio por el mic

* Things to be Done
** DONE Manejar archivos y buffers de audio
   CLOSED: [2020-02-04 Tue 08:59]
** DONE Escuchar por mic grabar buffer o archivo
   CLOSED: [2020-02-04 Tue 09:00]
** TODO Enviar audio al control <audio> html
** TODO Enviar mic al control <audio>
** Armar un pipe o queue para compartir mic
*** Para varias instancias de flask necesito compartir los mismos audio samples
    El mismo origen de datos entre las instancias de flask

** Pagina de inicio y logging
   https://pythonspot.com/login-authentication-with-flask/

   https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins   

   https://flask-login.readthedocs.io/en/latest/

   https://stackoverflow.com/questions/54992412/flask-login-usermixin-class-with-a-mongodb


** Pagina principal con control <audio> y usuarios loggeados
** Pagina armar nuevo usuario
** Base de datos usuarios y log
** Graba archivos de audio?
** Mejorar calidad del mic, se escucha mucho ruido de fondo


* MongoDB Pymongo
  https://api.mongodb.com/python/current/tutorial.html#tutorial

  https://stackoverflow.com/questions/41514896/how-can-i-use-mongodb-with-flask


* Varios Links de Flask
** flask werkzeug multiple connections
   https://stackoverflow.com/questions/14814201/can-i-serve-multiple-clients-using-just-flask-app-run-as-standalone

   https://stackoverflow.com/questions/43180733/handle-multiple-connections-in-flask-api

   app.run(host='0.0.0.0', debug=True, threaded=True)
** socket.io
   https://socket.io/

   https://www.npmjs.com/package/socket.io-stream

   https://nodejs.org/api/stream.html

   https://github.com/substack/stream-handbook

   https://stackoverflow.com/questions/28394340/how-to-play-a-sound-from-a-socket-io-event


** audio control and stream audio html5
   http://www.diva-portal.org/smash/get/diva2:1023478/FULLTEXT02.pdf

   https://gabrieltanner.org/blog/webrtc-video-broadcast

   https://buildthings.wordpress.com/remote-ham-radio-base-station-voip-web-auio-api-html5-audio-node-js-server-raspberry-pi/

** por el reproductor
   https://apiko.com/blog/audio-file-streaming-in-js/

** socket.io and audio control
   https://medium.com/@saurssaurav33/how-to-make-a-browser-walkie-talkie-using-node-js-and-socket-io-ae024bb9b378

* Flask multiple pages multiple stylesheets
** Paginas
   - Dentro de /template
   - en el template del html, dentro del header, hacer referencia al style que uso

   <html>
   <head>
   <link rel= "stylesheet" type= "text/css" href= "../styles/mainpage.css">
   </head>
   <body>
   <!-- content --> 

   - tipicamente para que jinja funcione mejor
     <link rel= "stylesheet" type= "text/css" href= "{{ url_for('static',filename='mainpage.css') }}">

** Stylesheets
   - Dentro de /static pondo los .css con los nombres de los links de las paginas

** input overflow (veo el defaultSampleRate)
   >>> import pyaudio
   >>> audio_dev = pyaudio.PyAudio()
   >>> audio_dev.get_device_info_by_index(0)['defaultSampleRate']
   >>> 44100.0

** cada tanto se corta el audio, cada 10min aprox
   - es un tema con pyaudio
   cuando leo el chunck con read, le paso un flag para que no me salte el error

   currChunk = audio_stream.read(CHUNK, exception_on_overflow=True)

* Flask socket io
** Instalacion
   pip3 install flask-socketio

** Manual
   https://flask-socketio.readthedocs.io/en/latest/

** Funcionamiento con Audio Control
   After lots research and tinkering I finally found the solution.
   Basically it came down to serving pyaudio.paFloat32 audio data through 
   WebSockets using Flask's SocketIO implementation and receiving/playing
   the data in JavaScript using HTML5's AudioContext.

   As this is requires quite some code, I think it would not be a good 
   idea to post it all here. Instead, feel free to check out the project 
   I'm using it in: simpleCam
   https://github.com/paranerd/simplecam

   The relevant code is in: 
   - noise_detector.py (recording) 
   - server.py (WebSocket transfer) 
   - static/js/player.js (receiving/playing)

   Thanks everyone for the support!
   Stream audio from pyaudio with Flask to HTML5
   https://stackoverflow.com/questions/47106364/stream-audio-from-pyaudio-with-flask-to-html5

** Conectar un Button HTML con JavaScript
   https://stackoverflow.com/questions/1947263/using-an-html-button-to-call-a-javascript-function

